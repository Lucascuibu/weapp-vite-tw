import { InlineConfig } from 'vite';
import { RollupWatcher, RollupOutput } from 'rollup';
import { FSWatcher } from 'chokidar';
import { PackageJson } from 'pkg-types';
import { S as SubPackage } from './config-CdIKMAhF.cjs';

interface ProjectConfig {
    miniprogramRoot?: string;
    srcMiniprogramRoot?: string;
}

interface CompilerContextOptions {
    cwd: string;
    inlineConfig?: InlineConfig;
    isDev?: boolean;
    projectConfig?: ProjectConfig;
    type?: 'app' | 'subPackage';
    mode?: string;
    packageJson?: PackageJson;
    subPackage?: SubPackage;
}
declare class CompilerContext {
    inlineConfig: InlineConfig;
    cwd: string;
    isDev: boolean;
    projectConfig: ProjectConfig;
    mode: string;
    packageJson: PackageJson;
    subPackage?: SubPackage;
    watcherMap: Map<string | symbol, RollupWatcher | FSWatcher>;
    subPackageContextMap: Map<string, CompilerContext>;
    type: CompilerContextOptions['type'];
    parent?: CompilerContext;
    constructor(options?: CompilerContextOptions);
    get srcRoot(): string | undefined;
    relativeSrcRoot(p: string): string;
    get mpDistRoot(): string;
    forkSubPackage(subPackage: SubPackage): CompilerContext;
    internalDev(inlineConfig: InlineConfig): Promise<RollupWatcher>;
    runDev(): Promise<FSWatcher | undefined>;
    runProd(): Promise<RollupOutput | RollupOutput[]>;
    build(): Promise<FSWatcher | undefined> | Promise<RollupOutput | RollupOutput[]>;
    loadDefaultConfig(): Promise<void>;
}

export { CompilerContext, type CompilerContextOptions };
