import {
  CompilerContext
} from "./chunk-BVIY5HA2.mjs";
import "./chunk-444MQSSG.mjs";

// src/cli.ts
import process from "node:process";
import { cac } from "cac";
import { initConfig } from "@weapp-core/init";
import { parse } from "weapp-ide-cli";

// src/logger.ts
import logger from "@weapp-core/logger";
var logger_default = logger;

// package.json
var version = "1.1.1";

// src/constants.ts
var VERSION = version;

// src/cli.ts
var cli = cac("weapp-vite");
function filterDuplicateOptions(options) {
  for (const [key, value] of Object.entries(options)) {
    if (Array.isArray(value)) {
      options[key] = value[value.length - 1];
    }
  }
}
function convertBase(v) {
  if (v === 0) {
    return "";
  }
  return v;
}
cli.option("-c, --config <file>", `[string] use specified config file`).option("--base <path>", `[string] public base path (default: /)`, {
  type: [convertBase]
}).option("-l, --logLevel <level>", `[string] info | warn | error | silent`).option("--clearScreen", `[boolean] allow/disable clear screen when logging`).option("-d, --debug [feat]", `[string | boolean] show debug logs`).option("-f, --filter <filter>", `[string] filter debug logs`).option("-m, --mode <mode>", `[string] set env mode`);
cli.command("[root]", "start dev server").alias("serve").alias("dev").action(async (root, options) => {
  filterDuplicateOptions(options);
  const ctx = new CompilerContext({
    cwd: root,
    mode: options.mode,
    isDev: true
  });
  await ctx.loadDefaultConfig();
  await ctx.runDev();
});
cli.command("build [root]", "build for production").option("--target <target>", `[string] transpile target (default: 'modules')`).option("--outDir <dir>", `[string] output directory (default: dist)`).option(
  "--sourcemap [output]",
  `[boolean | "inline" | "hidden"] output source maps for build (default: false)`
).option(
  "--minify [minifier]",
  `[boolean | "terser" | "esbuild"] enable/disable minification, or specify minifier to use (default: esbuild)`
).option(
  "--emptyOutDir",
  `[boolean] force empty outDir when it's outside of root`
).option("-w, --watch", `[boolean] rebuilds when modules have changed on disk`).action(async (root, options) => {
  filterDuplicateOptions(options);
  const ctx = new CompilerContext({
    cwd: root,
    mode: options.mode
  });
  await ctx.loadDefaultConfig();
  await ctx.runProd();
});
cli.command("init").action(() => {
  try {
    initConfig({
      command: "weapp-vite"
    });
  } catch (error) {
    logger_default.error(error);
  } finally {
    process.exit();
  }
});
cli.command("open").action(async () => {
  try {
    await parse(["open", "-p"]);
  } catch (error) {
    logger_default.error(error);
  } finally {
    process.exit();
  }
});
cli.command("npm").alias("build:npm").alias("build-npm").action(async () => {
  try {
    await parse(["build-npm", "-p"]);
  } catch (error) {
    logger_default.error(error);
  } finally {
    process.exit();
  }
});
cli.help();
cli.version(VERSION);
cli.parse();
