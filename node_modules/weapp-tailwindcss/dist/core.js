'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var options = require('./options-Uv-owbdp.js');
require('magic-string');
require('@babel/generator');
require('@babel/traverse');
require('@babel/parser');
require('@weapp-core/escape');
require('@ast-core/escape');
require('./defaults-DW-EahCC.js');
require('./defu-Cdz2PomB.js');
require('./replace.js');
require('./shared-hzYeE1wX.js');
require('@weapp-core/regex');
require('@tailwindcss-mangle/shared');
require('lru-cache');
require('md5');
require('postcss');
require('./index-CCbEWRGc.js');
require('@csstools/postcss-is-pseudo-class');
require('postcss-rem-to-responsive-pixel');
require('postcss-selector-parser');
require('@babel/types');
require('htmlparser2');
require('node:path');
require('node:process');
require('tailwindcss-patch');

function createContext(options$1 = {}) {
    const opts = options.getOptions(options$1);
    const { templateHandler, styleHandler, patch, jsHandler, twPatcher } = opts;
    let runtimeSet = new Set();
    patch === null || patch === void 0 ? void 0 : patch();
    function transformWxss(rawCss, options) {
        return styleHandler(rawCss, Object.assign({
            isMainChunk: true,
        }, options));
    }
    function transformJs(rawJs, options = {}) {
        runtimeSet
            = options && options.runtimeSet
                ? options.runtimeSet
                : twPatcher.getClassSet();
        return jsHandler(rawJs, runtimeSet, options);
    }
    function transformWxml(rawWxml, options) {
        return templateHandler(rawWxml, Object.assign({
            runtimeSet,
        }, options));
    }
    return {
        transformWxss,
        transformWxml,
        transformJs,
    };
}

exports.createContext = createContext;
