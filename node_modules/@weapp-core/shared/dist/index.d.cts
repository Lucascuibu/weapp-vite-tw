import * as defu from 'defu';
export { default as defu } from 'defu';
export { default as set } from 'set-value';
export { default as get } from 'get-value';

declare function escapeStringRegexp(str: string): string;
declare function removeExtension(file: string): string;
declare function addExtension(filename: string, ext?: string): string;
declare function arrify<T>(val: T): T | T[];

declare const defuOverrideArray: <Source extends {
    [x: string]: any;
    [x: number]: any;
    [x: symbol]: any;
}, Defaults extends Array<{
    [x: string]: any;
    [x: number]: any;
    [x: symbol]: any;
} | (number | boolean | any[] | Record<never, any> | null | undefined)>>(source: Source, ...defaults: Defaults) => defu.Defu<Source, Defaults>;
declare function isObject(x: unknown): x is Record<string | symbol | number, unknown>;

export { addExtension, arrify, defuOverrideArray, escapeStringRegexp, isObject, removeExtension };
