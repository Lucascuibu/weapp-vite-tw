import * as pkg_types from 'pkg-types';
import { PackageJson } from 'pkg-types';
import { set } from '@weapp-core/shared';

interface SetMethod {
    (path: set.InputType, value: any, options?: set.Options): void;
}
interface SharedUpdateOptions {
    root: string;
    dest?: string;
    write?: boolean;
    cb?: (set: SetMethod) => void;
}
interface UpdateProjectConfigOptions extends SharedUpdateOptions {
}
interface UpdatePackageJsonOptions extends SharedUpdateOptions {
    command?: 'weapp-vite';
}
interface ProjectConfig {
    miniprogramRoot?: string;
    srcMiniprogramRoot?: string;
    setting: {
        packNpmManually: boolean;
        packNpmRelationList: {
            packageJsonPath: string;
            miniprogramNpmDistDir: string;
        }[];
    };
}

declare function updateProjectConfig(options: UpdateProjectConfigOptions): ProjectConfig | undefined;
declare function updatePackageJson(options: UpdatePackageJsonOptions): PackageJson | undefined;
declare function initViteConfigFile(options: SharedUpdateOptions): string;
declare function initTsDtsFile(options: SharedUpdateOptions): string;
declare function initTsJsonFiles(options: SharedUpdateOptions): void;
declare function initConfig(options: {
    root?: string;
    command?: 'weapp-vite';
}): {
    projectConfig: {
        name: string;
        path: string;
        value: ProjectConfig;
    };
    packageJson: {
        name: string;
        path: string;
        value: PackageJson;
    };
    viteConfig: {
        name: string;
        path: string;
        value: string;
    };
    tsconfig: {
        name: string;
        path: string;
        value: pkg_types.TSConfig;
    };
    tsconfigNode: {
        name: string;
        path: string;
        value: pkg_types.TSConfig;
    };
    dts: {
        name: string;
        path: string;
        value: string;
    };
};

export { initConfig, initTsDtsFile, initTsJsonFiles, initViteConfigFile, updatePackageJson, updateProjectConfig };
