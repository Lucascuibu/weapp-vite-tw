"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var src_exports = {};
__export(src_exports, {
  initConfig: () => initConfig,
  initTsDtsFile: () => initTsDtsFile,
  initTsJsonFiles: () => initTsJsonFiles,
  initViteConfigFile: () => initViteConfigFile,
  updatePackageJson: () => updatePackageJson,
  updateProjectConfig: () => updateProjectConfig
});
module.exports = __toCommonJS(src_exports);
var import_node_path = __toESM(require("path"), 1);
var import_node_process = __toESM(require("process"), 1);
var import_fs_extra = __toESM(require("fs-extra"), 1);
var import_shared = require("@weapp-core/shared");
var import_logger = __toESM(require("@weapp-core/logger"), 1);

// src/context.ts
function createContext() {
  return {
    projectConfig: {
      name: "",
      path: "",
      value: {}
    },
    packageJson: {
      name: "",
      path: "",
      value: {}
    },
    viteConfig: {
      name: "",
      path: "",
      value: ""
    },
    tsconfig: {
      name: "",
      path: "",
      value: {}
    },
    tsconfigNode: {
      name: "",
      path: "",
      value: {}
    },
    dts: {
      name: "",
      path: "",
      value: ""
    }
  };
}

// src/index.ts
var ctx = createContext();
function updateProjectConfig(options) {
  const { root, dest, cb, write = true } = options;
  const projectConfigFilename = ctx.projectConfig.name = "project.config.json";
  const projectConfigPath = ctx.projectConfig.path = import_node_path.default.resolve(root, projectConfigFilename);
  if (import_fs_extra.default.existsSync(projectConfigPath)) {
    try {
      const projectConfig = import_fs_extra.default.readJSONSync(projectConfigPath);
      (0, import_shared.set)(projectConfig, "miniprogramRoot", "dist/");
      (0, import_shared.set)(projectConfig, "srcMiniprogramRoot", "dist/");
      (0, import_shared.set)(projectConfig, "setting.packNpmManually", true);
      cb?.(
        (...args) => {
          (0, import_shared.set)(projectConfig, ...args);
        }
      );
      if (Array.isArray((0, import_shared.get)(projectConfig, "setting.packNpmRelationList"))) {
        const x = projectConfig.setting.packNpmRelationList.find(
          (x2) => x2.packageJsonPath === "./package.json" && x2.miniprogramNpmDistDir === "./dist"
        );
        if (!x) {
          projectConfig.setting.packNpmRelationList.push({
            packageJsonPath: "./package.json",
            miniprogramNpmDistDir: "./dist"
          });
        }
      } else {
        (0, import_shared.set)(projectConfig, "setting.packNpmRelationList", [
          {
            packageJsonPath: "./package.json",
            miniprogramNpmDistDir: "./dist"
          }
        ]);
      }
      if (write) {
        import_fs_extra.default.outputJSONSync(dest ?? projectConfigPath, projectConfig, {
          spaces: 2
        });
        import_logger.default.log(`\u2728 \u8BBE\u7F6E ${projectConfigFilename} \u914D\u7F6E\u6587\u4EF6\u6210\u529F!`);
      }
      ctx.projectConfig.value = projectConfig;
      return projectConfig;
    } catch {
      import_logger.default.warn(`\u2728 \u8BBE\u7F6E ${projectConfigFilename} \u914D\u7F6E\u6587\u4EF6\u5931\u8D25!`);
    }
  } else {
    import_logger.default.warn(`\u2728 \u6CA1\u6709\u627E\u5230 ${projectConfigFilename} \u6587\u4EF6!`);
  }
}
function updatePackageJson(options) {
  const { root, dest, command, cb, write = true } = options;
  const packageJsonFilename = ctx.packageJson.name = "package.json";
  const packageJsonPath = ctx.packageJson.path = import_node_path.default.resolve(root, packageJsonFilename);
  if (import_fs_extra.default.existsSync(packageJsonPath)) {
    try {
      const packageJson = import_fs_extra.default.readJSONSync(packageJsonPath);
      (0, import_shared.set)(packageJson, "scripts.dev", `${command} dev`);
      (0, import_shared.set)(packageJson, "scripts.build", `${command} build`);
      if (command === "weapp-vite") {
        (0, import_shared.set)(packageJson, "scripts.open", `${command} open`);
        (0, import_shared.set)(packageJson, "scripts.build-npm", `${command} build-npm`);
        (0, import_shared.set)(packageJson, "devDependencies.miniprogram-api-typings", `latest`);
      }
      cb?.(
        (...args) => {
          (0, import_shared.set)(packageJson, ...args);
        }
      );
      if (write) {
        import_fs_extra.default.outputJSONSync(dest ?? packageJsonPath, packageJson, {
          spaces: 2
        });
        import_logger.default.log(`\u2728 \u8BBE\u7F6E ${packageJsonFilename} \u914D\u7F6E\u6587\u4EF6\u6210\u529F!`);
      }
      ctx.packageJson.value = packageJson;
      return packageJson;
    } catch {
    }
  }
}
function initViteConfigFile(options) {
  const { root, write = true } = options;
  const type = (0, import_shared.get)(ctx.packageJson.value, "type");
  const targetFilename = ctx.viteConfig.name = type === "module" ? "vite.config.ts" : "vite.config.mts";
  const viteConfigFilePath = ctx.viteConfig.path = import_node_path.default.resolve(root, targetFilename);
  const viteConfigFileCode = ctx.viteConfig.value = `import { defineConfig } from 'weapp-vite/config'

export default defineConfig({
  weapp: {
    // weapp-vite options
  },
})
`;
  if (write) {
    import_fs_extra.default.outputFileSync(viteConfigFilePath, viteConfigFileCode, "utf8");
    import_logger.default.log(`\u2728 \u8BBE\u7F6E ${targetFilename} \u914D\u7F6E\u6587\u4EF6\u6210\u529F!`);
  }
  return viteConfigFileCode;
}
function initTsDtsFile(options) {
  const { root, write = true } = options;
  const targetFilename = "vite-env.d.ts";
  const viteDtsFilePath = import_node_path.default.resolve(root, targetFilename);
  const code = `/// <reference types="vite/client" />
`;
  if (write) {
    import_fs_extra.default.outputFileSync(viteDtsFilePath, code, "utf8");
    import_logger.default.log(`\u2728 \u8BBE\u7F6E ${targetFilename} \u914D\u7F6E\u6587\u4EF6\u6210\u529F!`);
  }
  return code;
}
function initTsJsonFiles(options) {
  const { root, write = true } = options;
  const tsJsonFilename = ctx.tsconfig.name = "tsconfig.json";
  const tsJsonFilePath = ctx.tsconfig.path = import_node_path.default.resolve(root, tsJsonFilename);
  const tsNodeJsonFilename = ctx.tsconfigNode.name = "tsconfig.node.json";
  const tsNodeJsonFilePath = ctx.tsconfigNode.path = import_node_path.default.resolve(root, tsNodeJsonFilename);
  if (write) {
    const tsJsonValue = {
      compilerOptions: {
        target: "ES2020",
        jsx: "preserve",
        lib: [
          "ES2020",
          "DOM",
          "DOM.Iterable"
        ],
        useDefineForClassFields: true,
        baseUrl: ".",
        module: "ESNext",
        moduleResolution: "bundler",
        paths: {
          "@/*": [
            "./*"
          ]
        },
        resolveJsonModule: true,
        types: [
          "miniprogram-api-typings"
        ],
        allowImportingTsExtensions: true,
        allowJs: true,
        strict: true,
        noFallthroughCasesInSwitch: true,
        noUnusedLocals: true,
        noUnusedParameters: true,
        noEmit: true,
        isolatedModules: true,
        skipLibCheck: true
      },
      references: [
        {
          path: "./tsconfig.node.json"
        }
      ],
      include: [
        "**/*.ts",
        "**/*.js"
      ],
      exclude: [
        "node_modules"
      ]
    };
    if (write) {
      import_fs_extra.default.outputJSONSync(
        tsJsonFilePath,
        tsJsonValue,
        {
          encoding: "utf8",
          spaces: 2
        }
      );
      import_logger.default.log(`\u2728 \u8BBE\u7F6E ${tsJsonFilename} \u914D\u7F6E\u6587\u4EF6\u6210\u529F!`);
    }
    ctx.tsconfig.value = tsJsonValue;
    const tsJsonNodeValue = {
      compilerOptions: {
        composite: true,
        module: "ESNext",
        moduleResolution: "bundler",
        strict: true,
        allowSyntheticDefaultImports: true,
        skipLibCheck: true
      },
      include: [
        ctx.viteConfig.name
      ]
    };
    if (write) {
      import_fs_extra.default.outputJSONSync(tsNodeJsonFilePath, tsJsonNodeValue, {
        encoding: "utf8",
        spaces: 2
      });
      import_logger.default.log(`\u2728 \u8BBE\u7F6E ${tsNodeJsonFilename} \u914D\u7F6E\u6587\u4EF6\u6210\u529F!`);
    }
    ctx.tsconfigNode.value = tsJsonNodeValue;
  }
}
function initConfig(options) {
  const { root = import_node_process.default.cwd(), command } = options;
  updateProjectConfig({ root });
  updatePackageJson({ root, command });
  if (command === "weapp-vite") {
    initViteConfigFile({ root });
    initTsDtsFile({ root });
    initTsJsonFiles({ root });
  }
  return ctx;
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  initConfig,
  initTsDtsFile,
  initTsJsonFiles,
  initViteConfigFile,
  updatePackageJson,
  updateProjectConfig
});
