// src/index.ts
import path from "node:path";
import process from "node:process";
import fs from "fs-extra";
import { get, set } from "@weapp-core/shared";
import logger from "@weapp-core/logger";

// src/context.ts
function createContext() {
  return {
    projectConfig: {
      name: "",
      path: "",
      value: {}
    },
    packageJson: {
      name: "",
      path: "",
      value: {}
    },
    viteConfig: {
      name: "",
      path: "",
      value: ""
    },
    tsconfig: {
      name: "",
      path: "",
      value: {}
    },
    tsconfigNode: {
      name: "",
      path: "",
      value: {}
    },
    dts: {
      name: "",
      path: "",
      value: ""
    }
  };
}

// src/index.ts
var ctx = createContext();
function updateProjectConfig(options) {
  const { root, dest, cb, write = true } = options;
  const projectConfigFilename = ctx.projectConfig.name = "project.config.json";
  const projectConfigPath = ctx.projectConfig.path = path.resolve(root, projectConfigFilename);
  if (fs.existsSync(projectConfigPath)) {
    try {
      const projectConfig = fs.readJSONSync(projectConfigPath);
      set(projectConfig, "miniprogramRoot", "dist/");
      set(projectConfig, "srcMiniprogramRoot", "dist/");
      set(projectConfig, "setting.packNpmManually", true);
      cb?.(
        (...args) => {
          set(projectConfig, ...args);
        }
      );
      if (Array.isArray(get(projectConfig, "setting.packNpmRelationList"))) {
        const x = projectConfig.setting.packNpmRelationList.find(
          (x2) => x2.packageJsonPath === "./package.json" && x2.miniprogramNpmDistDir === "./dist"
        );
        if (!x) {
          projectConfig.setting.packNpmRelationList.push({
            packageJsonPath: "./package.json",
            miniprogramNpmDistDir: "./dist"
          });
        }
      } else {
        set(projectConfig, "setting.packNpmRelationList", [
          {
            packageJsonPath: "./package.json",
            miniprogramNpmDistDir: "./dist"
          }
        ]);
      }
      if (write) {
        fs.outputJSONSync(dest ?? projectConfigPath, projectConfig, {
          spaces: 2
        });
        logger.log(`\u2728 \u8BBE\u7F6E ${projectConfigFilename} \u914D\u7F6E\u6587\u4EF6\u6210\u529F!`);
      }
      ctx.projectConfig.value = projectConfig;
      return projectConfig;
    } catch {
      logger.warn(`\u2728 \u8BBE\u7F6E ${projectConfigFilename} \u914D\u7F6E\u6587\u4EF6\u5931\u8D25!`);
    }
  } else {
    logger.warn(`\u2728 \u6CA1\u6709\u627E\u5230 ${projectConfigFilename} \u6587\u4EF6!`);
  }
}
function updatePackageJson(options) {
  const { root, dest, command, cb, write = true } = options;
  const packageJsonFilename = ctx.packageJson.name = "package.json";
  const packageJsonPath = ctx.packageJson.path = path.resolve(root, packageJsonFilename);
  if (fs.existsSync(packageJsonPath)) {
    try {
      const packageJson = fs.readJSONSync(packageJsonPath);
      set(packageJson, "scripts.dev", `${command} dev`);
      set(packageJson, "scripts.build", `${command} build`);
      if (command === "weapp-vite") {
        set(packageJson, "scripts.open", `${command} open`);
        set(packageJson, "scripts.build-npm", `${command} build-npm`);
        set(packageJson, "devDependencies.miniprogram-api-typings", `latest`);
      }
      cb?.(
        (...args) => {
          set(packageJson, ...args);
        }
      );
      if (write) {
        fs.outputJSONSync(dest ?? packageJsonPath, packageJson, {
          spaces: 2
        });
        logger.log(`\u2728 \u8BBE\u7F6E ${packageJsonFilename} \u914D\u7F6E\u6587\u4EF6\u6210\u529F!`);
      }
      ctx.packageJson.value = packageJson;
      return packageJson;
    } catch {
    }
  }
}
function initViteConfigFile(options) {
  const { root, write = true } = options;
  const type = get(ctx.packageJson.value, "type");
  const targetFilename = ctx.viteConfig.name = type === "module" ? "vite.config.ts" : "vite.config.mts";
  const viteConfigFilePath = ctx.viteConfig.path = path.resolve(root, targetFilename);
  const viteConfigFileCode = ctx.viteConfig.value = `import { defineConfig } from 'weapp-vite/config'

export default defineConfig({
  weapp: {
    // weapp-vite options
  },
})
`;
  if (write) {
    fs.outputFileSync(viteConfigFilePath, viteConfigFileCode, "utf8");
    logger.log(`\u2728 \u8BBE\u7F6E ${targetFilename} \u914D\u7F6E\u6587\u4EF6\u6210\u529F!`);
  }
  return viteConfigFileCode;
}
function initTsDtsFile(options) {
  const { root, write = true } = options;
  const targetFilename = "vite-env.d.ts";
  const viteDtsFilePath = path.resolve(root, targetFilename);
  const code = `/// <reference types="vite/client" />
`;
  if (write) {
    fs.outputFileSync(viteDtsFilePath, code, "utf8");
    logger.log(`\u2728 \u8BBE\u7F6E ${targetFilename} \u914D\u7F6E\u6587\u4EF6\u6210\u529F!`);
  }
  return code;
}
function initTsJsonFiles(options) {
  const { root, write = true } = options;
  const tsJsonFilename = ctx.tsconfig.name = "tsconfig.json";
  const tsJsonFilePath = ctx.tsconfig.path = path.resolve(root, tsJsonFilename);
  const tsNodeJsonFilename = ctx.tsconfigNode.name = "tsconfig.node.json";
  const tsNodeJsonFilePath = ctx.tsconfigNode.path = path.resolve(root, tsNodeJsonFilename);
  if (write) {
    const tsJsonValue = {
      compilerOptions: {
        target: "ES2020",
        jsx: "preserve",
        lib: [
          "ES2020",
          "DOM",
          "DOM.Iterable"
        ],
        useDefineForClassFields: true,
        baseUrl: ".",
        module: "ESNext",
        moduleResolution: "bundler",
        paths: {
          "@/*": [
            "./*"
          ]
        },
        resolveJsonModule: true,
        types: [
          "miniprogram-api-typings"
        ],
        allowImportingTsExtensions: true,
        allowJs: true,
        strict: true,
        noFallthroughCasesInSwitch: true,
        noUnusedLocals: true,
        noUnusedParameters: true,
        noEmit: true,
        isolatedModules: true,
        skipLibCheck: true
      },
      references: [
        {
          path: "./tsconfig.node.json"
        }
      ],
      include: [
        "**/*.ts",
        "**/*.js"
      ],
      exclude: [
        "node_modules"
      ]
    };
    if (write) {
      fs.outputJSONSync(
        tsJsonFilePath,
        tsJsonValue,
        {
          encoding: "utf8",
          spaces: 2
        }
      );
      logger.log(`\u2728 \u8BBE\u7F6E ${tsJsonFilename} \u914D\u7F6E\u6587\u4EF6\u6210\u529F!`);
    }
    ctx.tsconfig.value = tsJsonValue;
    const tsJsonNodeValue = {
      compilerOptions: {
        composite: true,
        module: "ESNext",
        moduleResolution: "bundler",
        strict: true,
        allowSyntheticDefaultImports: true,
        skipLibCheck: true
      },
      include: [
        ctx.viteConfig.name
      ]
    };
    if (write) {
      fs.outputJSONSync(tsNodeJsonFilePath, tsJsonNodeValue, {
        encoding: "utf8",
        spaces: 2
      });
      logger.log(`\u2728 \u8BBE\u7F6E ${tsNodeJsonFilename} \u914D\u7F6E\u6587\u4EF6\u6210\u529F!`);
    }
    ctx.tsconfigNode.value = tsJsonNodeValue;
  }
}
function initConfig(options) {
  const { root = process.cwd(), command } = options;
  updateProjectConfig({ root });
  updatePackageJson({ root, command });
  if (command === "weapp-vite") {
    initViteConfigFile({ root });
    initTsDtsFile({ root });
    initTsJsonFiles({ root });
  }
  return ctx;
}
export {
  initConfig,
  initTsDtsFile,
  initTsJsonFiles,
  initViteConfigFile,
  updatePackageJson,
  updateProjectConfig
};
